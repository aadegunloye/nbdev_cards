[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "A deck of cards demo of nbdev based on ideas from Think Python 2nd Edition by Allen B. Downey",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "nbdev_cards",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall nbdev_cards in Development mode\n# make sure nbdev_cards package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to nbdev_cards\n$ nbdev_prepare",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "nbdev_cards",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/aadegunloye/nbdev_cards.git\nor from conda\n$ conda install -c aadegunloye nbdev_cards\nor from pypi\n$ pip install nbdev_cards\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class you can use to create, display, and compare playing cards:\n\nCard(1,3)\n\n3♦\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♣', '♦', '♥', '♠']",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "foo\n\n foo ()"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card -A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card clubs and ranks. These ae the ranks:\nsuits\n\n['♣', '♦', '♥', '♠']\nFor instance the suit at index 0:\nsuits[0]\n\n'♣'\nThese are the ranks:\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor instance the rank at index 1 (note that there isn’t a playing card at position 0, since we want the ranks to match the indices where possible):\nranks[1]\n\n'A'\nsource",
    "crumbs": [
      "card -A basic playing card"
    ]
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card -A basic playing card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, and greater than work on the rank and suit indices:\n\n\nCard.__gt__\n\n Card.__gt__ (a:__main__.Card)\n\nReturn self&gt;value.\n\n\n\nCard.__lt__\n\n Card.__lt__ (a:__main__.Card)\n\nReturn self&lt;value.\n\n\n\nCard.__eq__\n\n Card.__eq__ (a:__main__.Card)\n\nReturn self==value.\nFor instance, here’s some tests for equality…\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=2, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=1, rank=2), Card(suit=1, rank=3))\n\n… and a test of &lt; …\n\nassert Card(suit=1, rank=3)&lt;Card(suit=2, rank=3)\n\n… and finally, a test of &gt;:\n\nassert Card(suit=3, rank=3)&gt;Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3)&gt;Card(suit=2, rank=3)",
    "crumbs": [
      "card -A basic playing card"
    ]
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core"
    ]
  }
]